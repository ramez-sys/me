import React, { useState, useRef, useEffect, useCallback } from 'react'
import { motion } from 'framer-motion'
import { Mic, Palette, Lightbulb, BookOpen, Edit3, Eraser, Users, FileText, Clock, Target, BarChart2, Code, Search, Puzzle, Save, Undo, Redo, Download, GitBranch, PiSquare } from 'lucide-react'

export default function CreativeWritingCompanion() {
  const [theme, setTheme] = useState('light')
  const [activeTab, setActiveTab] = useState('write')
  const [content, setContent] = useState('')
  const [isRecording, setIsRecording] = useState(false)
  const [wordCount, setWordCount] = useState(0)
  const [aiSuggestion, setAiSuggestion] = useState('')
  const [drawingMode, setDrawingMode] = useState('pen')
  const [undoStack, setUndoStack] = useState<string[]>([])
  const [redoStack, setRedoStack] = useState<string[]>([])
  const canvasRef = useRef<HTMLCanvasElement | null>(null)
  const contextRef = useRef<CanvasRenderingContext2D | null>(null)
  const [isDrawing, setIsDrawing] = useState(false)

  const toggleTheme = () => setTheme(theme === 'light' ? 'dark' : 'light')
  const toggleRecording = () => setIsRecording(!isRecording)

  const bgColor = theme === 'light' ? 'bg-gray-100' : 'bg-gray-900'
  const textColor = theme === 'light' ? 'text-gray-900' : 'text-gray-100'
  const accentColor = theme === 'light' ? '#FF6B6B' : '#FF9F9F'
  const iconColor = theme === 'light' ? '#4A5568' : '#A0AEC0'

  useEffect(() => {
    if (canvasRef.current) {
      const canvas = canvasRef.current
      canvas.width = canvas.offsetWidth
      canvas.height = canvas.offsetHeight
      const context = canvas.getContext('2d')
      if (context) {
        context.lineCap = 'round'
        context.strokeStyle = theme === 'light' ? '#000000' : '#FFFFFF'
        context.lineWidth = 2
        contextRef.current = context
      }
    }
  }, [theme])

  useEffect(() => {
    const words = content.trim().split(/\s+/)
    setWordCount(words.length === 1 && words[0] === '' ? 0 : words.length)
  }, [content])

  const startDrawing = useCallback((event: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current
    if (!canvas) return

    const rect = canvas.getBoundingClientRect()
    const x = ('touches' in event) ? event.touches[0].clientX - rect.left : event.clientX - rect.left
    const y = ('touches' in event) ? event.touches[0].clientY - rect.top : event.clientY - rect.top

    contextRef.current?.beginPath()
    contextRef.current?.moveTo(x, y)
    setIsDrawing(true)
  }, [])

  const draw = useCallback((event: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
    if (!isDrawing || !contextRef.current || !canvasRef.current) return

    const rect = canvasRef.current.getBoundingClientRect()
    const x = ('touches' in event) ? event.touches[0].clientX - rect.left : event.clientX - rect.left
    const y = ('touches' in event) ? event.touches[0].clientY - rect.top : event.clientY - rect.top

    contextRef.current.lineTo(x, y)
    contextRef.current.stroke()
  }, [isDrawing])

  const stopDrawing = useCallback(() => {
    contextRef.current?.closePath()
    setIsDrawing(false)
    if (canvasRef.current) {
      setUndoStack([...undoStack, canvasRef.current.toDataURL()])
      setRedoStack([])
    }
  }, [undoStack])

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newContent = e.target.value
    setContent(newContent)
    setUndoStack([...undoStack, content])
    setRedoStack([])
    
    if (newContent.length > 0 && newContent.length % 50 === 0) {
      const suggestions = [
        "Consider adding more descriptive language here.",
        "This might be a good place for dialogue.",
        "You could expand on the character's motivation in this section.",
        "Think about incorporating a sensory detail to bring the scene to life.",
        "This paragraph might benefit from a stronger topic sentence."
      ]
      setAiSuggestion(`AI suggests: ${suggestions[Math.floor(Math.random() * suggestions.length)]}`)
    } else {
      setAiSuggestion('')
    }
  }

  const handleUndo = () => {
    if (undoStack.length > 0) {
      const prevState = undoStack[undoStack.length - 1]
      setUndoStack(undoStack.slice(0, -1))
      setRedoStack([...redoStack, content])
      setContent(prevState)
    }
  }

  const handleRedo = () => {
    if (redoStack.length > 0) {
      const nextState = redoStack[redoStack.length - 1]
      setRedoStack(redoStack.slice(0, -1))
      setUndoStack([...undoStack, content])
      setContent(nextState)
    }
  }

  const handleSave = () => {
    const element = document.createElement("a")
    const file = new Blob([content], {type: 'text/plain'})
    element.href = URL.createObjectURL(file)
    element.download = "creative_writing.txt"
    document.body.appendChild(element)
    element.click()
  }

  const clearCanvas = () => {
    if (contextRef.current && canvasRef.current) {
      contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)
      setUndoStack([...undoStack, canvasRef.current.toDataURL()])
      setRedoStack([])
    }
  }

  return (
    <div className={`min-h-screen flex flex-col ${bgColor} ${textColor} transition-colors duration-300`}>
      <header className="p-6 flex justify-between items-center bg-opacity-90 backdrop-filter backdrop-blur-lg">
        <h1 className="text-3xl font-bold">Creative Writing Companion</h1>
        <motion.button 
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={toggleTheme} 
          className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-300"
        >
          <Palette className="h-6 w-6" style={{ color: iconColor }} />
        </motion.button>
      </header>
      <main className="flex-1 p-6 flex flex-col space-y-6">
        <div className="flex space-x-4 justify-center">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className={`px-6 py-3 rounded-full text-lg font-semibold transition-colors duration-300 ${
              activeTab === 'write' 
                ? 'bg-gradient-to-r from-pink-500 to-orange-500 text-white' 
                : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-200'
            }`}
            onClick={() => setActiveTab('write')}
          >
            Write
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className={`px-6 py-3 rounded-full text-lg font-semibold transition-colors duration-300 ${
              activeTab === 'draw' 
                ? 'bg-gradient-to-r from-purple-500 to-blue-500 text-white' 
                : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-200'
            }`}
            onClick={() => setActiveTab('draw')}
          >
            Draw
          </motion.button>
        </div>
        <div className={`flex-1 rounded-3xl shadow-lg overflow-hidden ${theme === 'light' ? 'bg-white' : 'bg-gray-800'} transition-colors duration-300`}>
          {activeTab === 'write' ? (
            <div className="h-full p-6 flex flex-col">
              <textarea
                value={content}
                onChange={handleContentChange}
                className={`flex-1 w-full p-4 rounded-2xl resize-none ${
                  theme === 'light' ? 'bg-gray-100' : 'bg-gray-700'
                } ${textColor} focus:ring-2 focus:ring-opacity-50 focus:ring-blue-500 transition-all duration-300`}
                placeholder="Start writing here..."
              />
              {aiSuggestion && (
                <motion.div 
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className="mt-4 p-4 bg-blue-100 text-blue-800 rounded-2xl shadow-md"
                >
                  {aiSuggestion}
                </motion.div>
              )}
            </div>
          ) : (
            <div className="relative h-full">
              <canvas
                ref={canvasRef}
                onMouseDown={startDrawing}
                onMouseMove={draw}
                onMouseUp={stopDrawing}
                onMouseOut={stopDrawing}
                onTouchStart={startDrawing}
                onTouchMove={draw}
                onTouchEnd={stopDrawing}
                className="w-full h-full touch-none"
              />
              <div className="absolute top-4 right-4 space-x-2">
                <motion.button 
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setDrawingMode('pen')} 
                  className={`p-3 rounded-full transition-colors duration-300 ${
                    drawingMode === 'pen' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-200'
                  }`}
                >
                  <Edit3 className="h-6 w-6" />
                </motion.button>
                <motion.button 
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setDrawingMode('eraser')} 
                  className={`p-3 rounded-full transition-colors duration-300 ${
                    drawingMode === 'eraser' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-200'
                  }`}
                >
                  <Eraser className="h-6 w-6" />
                </motion.button>
                <motion.button 
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={clearCanvas} 
                  className="p-3 rounded-full bg-red-500 text-white transition-colors duration-300"
                >
                  Clear
                </motion.button>
              </div>
            </div>
          )}
        </div>
        <div className="flex justify-between items-center">
          <div className="flex space-x-4">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={toggleRecording}
              className={`p-3 rounded-full transition-colors duration-300 ${
                isRecording ? 'bg-red-500 text-white' : 'bg-gray-200 dark:bg-gray-700'
              }`}
            >
              <Mic className="h-6 w-6" style={{ color: isRecording ? 'white' : iconColor }} />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={handleUndo}
              className="p-3 rounded-full bg-gray-200 dark:bg-gray-700 transition-colors duration-300"
            >
              <Undo className="h-6 w-6" style={{ color: iconColor }} />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={handleRedo}
              className="p-3 rounded-full bg-gray-200 dark:bg-gray-700 transition-colors duration-300"
            >
              <Redo className="h-6 w-6" style={{ color: iconColor }} />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={handleSave}
              className="p-3 rounded-full bg-gray-200 dark:bg-gray-700 transition-colors duration-300"
            >
              <Save className="h-6 w-6" style={{ color: iconColor }} />
            </motion.button>
          </div>
          <div className={`${textColor} text-lg font-semibold`}>
            Word Count: {wordCount}
          </div>
        </div>
      </main>
      <footer className="p-6 flex justify-center space-x-6 bg-opacity-90 backdrop-filter backdrop-blur-lg overflow-x-auto">
        {[
          { icon: Lightbulb, label: 'AI Suggestions' },
          { icon: BookOpen, label: 'Flashcards' },
          { icon: Users, label: 'Collaboration' },
          { icon: PiSquare, label: 'Math Input/Formula Solver' },
          { icon: GitBranch, label: 'Mind Mapping' },
          { icon: Download, label: 'Export' },
          { icon: Search, label: 'Plagiarism Check' },
          { icon: FileText, label: 'Documents' },
          { icon: Clock, label: 'Timer' },
          { icon: Target, label: 'Goals' },
          { icon: BarChart2, label: 'Analytics' },
          { icon: Code, label: 'Code Snippets' },
          { icon: Puzzle, label: 'Plugins' },
        ].map(({ icon: Icon, label }, index) => (
          <motion.button
            key={index}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            className="p-3 rounded-full bg-gray-200 dark:bg-gray-700 transition-colors duration-300"
            aria-label={label}
          >
            <Icon className="h-6 w-6" style={{ color: iconColor }} />
          </motion.button>
        ))}
      </footer>
    </div>
  )
}